---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Calculate reading time
const wordsPerMinute = 200;
const textContent = entry.body;
const wordCount = textContent.split(/\s+/).length;
const readingTime = Math.ceil(wordCount / wordsPerMinute);

// Get related posts based on shared tags
const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const relatedPosts = allPosts
  .filter(post =>
    post.slug !== entry.slug &&
    post.data.tags?.some(tag => entry.data.tags?.includes(tag))
  )
  .sort((a, b) => {
    // Sort by number of shared tags, then by date
    const aSharedTags = a.data.tags?.filter(tag => entry.data.tags?.includes(tag)).length || 0;
    const bSharedTags = b.data.tags?.filter(tag => entry.data.tags?.includes(tag)).length || 0;
    if (bSharedTags !== aSharedTags) return bSharedTags - aSharedTags;
    return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
  })
  .slice(0, 3);

const base = import.meta.env.BASE_URL;
const baseUrl = base.endsWith('/') ? base.slice(0, -1) : base;
---

<Layout title={entry.data.title} description={entry.data.description}>
  <div class="reading-progress">
    <div class="reading-progress-bar"></div>
  </div>

  <article class="blog-post">
    <header class="post-header">
      {entry.data.image && (
        <img
          src={entry.data.image}
          alt={entry.data.title}
          class="post-image"
          loading="eager"
          decoding="async"
          width="600"
          height="400"
        />
      )}
      <div class="post-meta">
        {entry.data.mood && (
          <span class="mood-badge">{entry.data.mood}</span>
        )}
        <time>{new Date(entry.data.pubDate).toLocaleDateString()}</time>
        <span class="reading-time">
          {readingTime} min read
        </span>
      </div>
      <h1>{entry.data.title}</h1>
      {entry.data.description && (
        <p class="post-description">{entry.data.description}</p>
      )}
      {entry.data.perspective && (
        <div class="perspective-indicator">
          <strong>Exploring:</strong> {entry.data.perspective}
        </div>
      )}
    </header>

    {entry.data.audioUrl && (
      <div class="audio-player-wrapper">
        <div class="audio-header">
          <h3>Listen to this perspective</h3>
          <p>Prefer to listen? Here's the audio version of this post.</p>
        </div>
        <audio controls preload="metadata">
          <source src={entry.data.audioUrl} type="audio/wav" />
          <source src={entry.data.audioUrl.replace('.wav', '.mp3')} type="audio/mpeg" />
          Your browser does not support the audio element.
        </audio>
      </div>
    )}

    <div class="post-content">
      <Content />
    </div>

    {entry.data.tags && entry.data.tags.length > 0 && (
      <footer class="post-footer">
        <div class="tags">
          {entry.data.tags.map(tag => (
            <a href={`${baseUrl}/tags/${tag}`} class="tag">{tag}</a>
          ))}
        </div>
      </footer>
    )}

    {relatedPosts.length > 0 && (
      <section class="related-posts">
        <h2>Continue Exploring</h2>
        <div class="related-posts-grid">
          {relatedPosts.map(post => (
            <article class="related-post-card">
              {post.data.image && (
                <div class="related-post-image">
                  <img
                    src={post.data.image}
                    alt={post.data.title}
                    loading="lazy"
                    decoding="async"
                    width="400"
                    height="225"
                  />
                </div>
              )}
              <div class="related-post-content">
                {post.data.mood && (
                  <span class="mood-badge-small">{post.data.mood}</span>
                )}
                <h3><a href={`${baseUrl}/blog/${post.slug}`}>{post.data.title}</a></h3>
                <p>{post.data.description}</p>
                {post.data.tags && (
                  <div class="shared-tags">
                    {post.data.tags.filter(tag => entry.data.tags?.includes(tag)).slice(0, 2).map(tag => (
                      <span class="shared-tag">#{tag}</span>
                    ))}
                  </div>
                )}
              </div>
            </article>
          ))}
        </div>
      </section>
    )}
  </article>
</Layout>

<style>
  .reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: rgba(90, 107, 93, 0.1);
    z-index: 200;
  }

  .reading-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, var(--sage-green), var(--steel-blue));
    width: 0%;
    transition: width 0.1s ease;
  }

  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .post-header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .post-image {
    width: 100%;
    max-width: 600px;
    height: auto;
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 8px 30px rgba(0,0,0,0.1);
  }

  .post-meta {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.875rem;
  }

  .mood-badge {
    background: linear-gradient(135deg, var(--sage-green) 0%, var(--sage-muted) 100%);
    color: white;
    padding: 0.5rem 1.25rem;
    border-radius: 24px;
    font-size: 0.875rem;
    font-weight: 600;
    font-style: italic;
    letter-spacing: 0.03em;
    text-shadow: 0 1px 2px rgba(0,0,0,0.15);
    box-shadow: 0 2px 8px rgba(90, 107, 93, 0.25);
    text-transform: lowercase;
  }

  .post-meta time {
    color: var(--shadow-subtle);
  }

  .reading-time {
    display: inline-flex;
    align-items: center;
    color: var(--shadow-subtle);
    font-size: 0.875rem;
    font-style: italic;
  }

  .blog-post h1 {
    font-family: 'Playfair Display', serif;
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--charcoal-dark);
    margin-bottom: 1rem;
    line-height: 1.2;
    letter-spacing: -0.02em;
  }

  .post-description {
    font-size: 1.125rem;
    color: var(--shadow-subtle);
    font-style: italic;
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .perspective-indicator {
    background: linear-gradient(135deg, var(--cream-warm) 0%, var(--mist-light) 100%);
    padding: 1.25rem 1.75rem;
    border-radius: 12px;
    font-size: 1rem;
    color: var(--steel-blue);
    border-left: 4px solid var(--sage-green);
    margin-bottom: 2.5rem;
    position: relative;
    box-shadow: 0 2px 12px rgba(90, 107, 93, 0.08);
    border: 1px solid rgba(90, 107, 93, 0.15);
  }

  .perspective-indicator strong {
    color: var(--sage-green);
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.1em;
    font-style: normal;
  }

  .audio-player-wrapper {
    margin: 2rem 0;
    padding: 1.5rem;
    background: linear-gradient(135deg, var(--cream-warm) 0%, var(--mist-light) 100%);
    border-radius: 12px;
    border: 1px solid rgba(90, 107, 93, 0.1);
    box-shadow: 0 4px 16px rgba(0,0,0,0.05);
  }

  .audio-header {
    margin-bottom: 1rem;
    text-align: center;
  }

  .audio-header h3 {
    font-family: 'Playfair Display', serif;
    font-size: 1.25rem;
    color: var(--charcoal-dark);
    margin: 0 0 0.5rem 0;
  }

  .audio-header p {
    color: var(--shadow-subtle);
    font-size: 0.9rem;
    margin: 0;
    font-style: italic;
  }

  .audio-player-wrapper audio {
    width: 100%;
    height: 40px;
    border-radius: 8px;
    outline: none;
  }

  .audio-player-wrapper audio::-webkit-media-controls-panel {
    background-color: var(--sage-green);
    border-radius: 8px;
  }

  .post-content {
    max-width: 680px;
    margin: 0 auto;
    line-height: 1.75;
    font-size: 1.0625rem;
    color: var(--charcoal-dark);
  }

  .post-content :global(h1),
  .post-content :global(h2),
  .post-content :global(h3) {
    font-family: 'Playfair Display', serif;
    color: var(--charcoal-dark);
    font-weight: 600;
    line-height: 1.3;
  }

  .post-content :global(h2) {
    margin-top: 3rem;
    margin-bottom: 1.25rem;
    scroll-margin-top: 100px;
  }

  .post-content :global(h3) {
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    scroll-margin-top: 100px;
  }

  .post-content :global(p) {
    margin-bottom: 1.5rem;
    text-align: left;
    hyphens: auto;
  }

  .post-content :global(img) {
    width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 2rem 0;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  }

  .post-footer {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(90, 107, 93, 0.2);
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .tag {
    background: var(--mist-light);
    color: var(--steel-blue);
    padding: 0.4rem 0.85rem;
    border-radius: 16px;
    font-size: 0.8rem;
    font-weight: 600;
    border: 1.5px solid rgba(90, 107, 93, 0.2);
    transition: all 0.25s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    letter-spacing: 0.01em;
  }

  .tag::before {
    content: '#';
    opacity: 0.6;
    font-weight: 400;
  }

  .tag:hover {
    background: linear-gradient(135deg, var(--sage-green), var(--steel-blue));
    color: white;
    border-color: transparent;
    transform: translateY(-1px);
    box-shadow: 0 3px 10px rgba(90, 107, 93, 0.25);
  }

  .related-posts {
    margin-top: 4rem;
    padding-top: 3rem;
    border-top: 2px solid rgba(90, 107, 93, 0.15);
  }

  .related-posts h2 {
    font-family: 'Playfair Display', serif;
    font-size: 2rem;
    font-weight: 700;
    color: var(--charcoal-dark);
    margin-bottom: 2rem;
    text-align: center;
    position: relative;
    padding-bottom: 1rem;
  }

  .related-posts h2::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, var(--sage-green), var(--steel-blue));
    border-radius: 2px;
  }

  .related-posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .related-post-card {
    background: rgba(254, 254, 254, 0.85);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(90, 107, 93, 0.15);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 4px 16px rgba(45, 45, 45, 0.06);
  }

  .related-post-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 32px rgba(45, 45, 45, 0.12);
  }

  .related-post-image {
    width: 100%;
    height: 160px;
    overflow: hidden;
  }

  .related-post-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.4s ease;
  }

  .related-post-card:hover .related-post-image img {
    transform: scale(1.05);
  }

  .related-post-content {
    padding: 1.5rem;
  }

  .mood-badge-small {
    background: linear-gradient(135deg, var(--sage-green) 0%, var(--sage-muted) 100%);
    color: white;
    padding: 0.3rem 0.75rem;
    border-radius: 16px;
    font-size: 0.7rem;
    font-weight: 500;
    font-style: italic;
    display: inline-block;
    margin-bottom: 0.75rem;
  }

  .related-post-content h3 {
    margin-bottom: 0.75rem;
    font-size: 1.125rem;
  }

  .related-post-content h3 a {
    text-decoration: none;
    color: var(--charcoal-dark);
    transition: color 0.25s ease;
  }

  .related-post-content h3 a:hover {
    color: var(--link-hover);
  }

  .related-post-content p {
    font-size: 0.9rem;
    color: var(--text-secondary);
    line-height: 1.5;
    margin-bottom: 0.75rem;
  }

  .shared-tags {
    display: flex;
    gap: 0.4rem;
    flex-wrap: wrap;
  }

  .shared-tag {
    background: var(--mist-light);
    color: var(--sage-green);
    padding: 0.2rem 0.5rem;
    border-radius: 8px;
    font-size: 0.7rem;
    font-weight: 600;
    border: 1px solid rgba(90, 107, 93, 0.2);
  }

  @media (max-width: 768px) {
    .blog-post {
      padding: 1rem;
    }

    .blog-post h1 {
      font-size: 2.25rem;
    }

    .post-meta {
      flex-direction: column;
      gap: 0.5rem;
    }

    .post-content {
      font-size: 1.0625rem;
      line-height: 1.75;
      padding: 0 1rem;
    }

    .post-content :global(h2) {
      font-size: 1.75rem;
      margin-top: 2.5rem;
    }

    .post-content :global(h3) {
      font-size: 1.35rem;
      margin-top: 2rem;
    }

    .tag {
      padding: 0.65rem 1.1rem;
      font-size: 0.875rem;
      min-height: 44px;
      display: inline-flex;
      align-items: center;
    }

    .related-posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  const progressBar = document.querySelector('.reading-progress-bar') as HTMLElement;
  const article = document.querySelector('.post-content') as HTMLElement;

  window.addEventListener('scroll', () => {
    if (article && progressBar) {
      const articleTop = article.offsetTop;
      const articleHeight = article.offsetHeight;
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;

      const progress = Math.min(
        ((scrollPosition - articleTop + windowHeight) / articleHeight) * 100,
        100
      );

      progressBar.style.width = `${Math.max(0, progress)}%`;
    }
  });
</script>